// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

import UIKit

{% if icons %}
extension Iconic {

    /**
    Registers the {{familyName}} font to Iconic.
    You shall do this once, when launching your application. Internally, the icon mapping is retrieved and
    kept in memory during the application's life term.
    */
    public class func register{{enumName}}() {
        Iconic.registerFont("{{familyName}}", map: {{enumName}}Map)
    }

    /**
     Returns a {{familyName}} font object in the specified size.
     
     - parameter fontSize: The size (in points) to which the font is scaled.
     This value must be greater than 0.0, or a system Font object will be returned.
     */
    public class func {{enumName}}FontOfSize(fontSize: CGFloat) -> UIFont? {
        return Iconic.iconFontOfSize(fontSize)
    }

    /**
    Creates an attributed string with the specified icon enum type.

    - parameter icon: The icon enum type.
    - parameter size: The size of the text, in points.
    - parameter color: Optional color to be applied to the icon.
    */
    public class func attributedStringFor{{enumName}}(icon: {{enumName}}, size: CGFloat, color: UIColor?) -> NSAttributedString? {
        return Iconic.attributedStringForIndex(icon.rawValue, size: size, color: color)
    }

    /**
    Creates an image out of an attributed string with the specified icon enum type.

    - parameter icon: The icon enum type.
    - parameter size: The size of the text, in points.
    - parameter color: Optional color to be applied to the icon.
    */
    public class func imageFor{{enumName}}(icon: {{enumName}}, size: CGFloat, color: UIColor?) -> UIImage? {
        return Iconic.imageForIndex(icon.rawValue, size: size, color: color)
    }

    /**
     Returns a string representation of an unicode for the specified icon enum type.

     - parameter icon: The icon enum type.
     - returns An unicode string representation.
     */
    public class func unicodeStringFor{{enumName}}(icon: {{enumName}}) -> String? {
        return Iconic.unicodeStringForIndex(icon.rawValue)
    }
}

extension UIBarButtonItem {

    /**
    Initializes a new item using the specified icon enum type and other properties.

    - parameter {{enumName|lowerFirstWord}}: The icon enum type to be used as image.
    - parameter size: The size of the image, in points.
    - parameter target: The object that receives the action message.
    - parameter action: The action to send to target when this item is selected.
    */
    public convenience init({{enumName|lowerFirstWord}}: {{enumName}}, size: CGFloat, target: AnyObject?, action: Selector) {
        
        let image = Iconic.imageForIndex({{enumName|lowerFirstWord}}.rawValue, size: size, color: .blackColor())
        self.init(image: image, style: .Plain, target: target, action: action)
    }
}

extension UITabBarItem {

    /**
    Initializes a new item using the specified icon enum type and other properties.

    - parameter {{enumName|lowerFirstWord}}: The icon enum type to be used as image.
    - parameter size: The size of the image, in points.
    - parameter title: The item's title. If nil, a title is not displayed.
    - parameter tag: The receiver's tag, an integer that you can use to identify bar item objects in your application.
    */
    public convenience init({{enumName|lowerFirstWord}}: {{enumName}}, size: CGFloat, title: String?, tag: Int) {
        
        let image = Iconic.imageForIndex({{enumName|lowerFirstWord}}.rawValue, size: size, color: .blackColor())
        self.init(title: title, image: image, tag: tag)
    }
}

extension UIButton {

    /**
    Sets the icon to use for the specified state.

    - parameter {{enumName|lowerFirstWord}}: The icon enum type to be used as image.
    - parameter size: The size of the image, in points.
    - parameter state: The state that uses the specified title. The values are described in UIControlState.
    */
    public func set{{enumName}}({{enumName|lowerFirstWord}}: {{enumName}}, size: CGFloat, forState: UIControlState) {
        
        self.setIconForIndex({{enumName|lowerFirstWord}}.rawValue, size: size, forState: state)
    }
}

/**
A strongly typed representation of every available icon name.
*/
@objc public enum {{enumName}}: Int {
    {% for icon in icons %}
    case {{icon.name|swiftIdentifier|snakeToCamelCase}}
    {% endfor %}

    // Useful to get the total count of icons. This index doesn't have any associated unicode value.
    case TotalCount
}

/**
A list of unicode characters associated with each {{enumName}} case, in order.
*/
public let {{enumName}}Map: Array<String> = [
    {% for icon in icons %}
    "{{icon.unicode|unicodeCase}}",
    {% endfor %}
]

/**
Returns the name of an icon enum type as a string.
*/
public func NSStringFrom{{enumName}}({{enumName|lowercase}}: {{enumName}}) -> String {
    switch {{enumName|lowercase}} {
    {% for icon in icons %}
    case .{{icon.name|swiftIdentifier|snakeToCamelCase}}: return "{{icon.name|swiftIdentifier|snakeToCamelCase}}"
    {% endfor %}
    default: return ""
    }
}
{% else %}
// No icon found
{% endif %}